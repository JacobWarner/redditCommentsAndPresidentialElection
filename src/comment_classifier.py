import sys
import requests
import pprint
import ast

from nltk.sentiment.vader import SentimentIntensityAnalyzer


def classify_all_comments_sentiment(input_file, output_file):
    sia = SentimentIntensityAnalyzer()
    file = open(input_file, 'r')
    filtered_file = open(output_file, 'w')

    total_obj = 0
    written_obj = 0

    while True:
        line = file.readline()

        if len(line) == 0:
            break

        total_obj += 1

        data = json.loads(line)
        sentiment = sia.polarity_scores(data['body'])
        data['sentiment'] = sentiment

        json.dump(data, filtered_file)
        filtered_file.write('\n')
        written_obj += 1

    print('Total objects: {}'.format(total_obj))
    print('Written objects: {}'.format(written_obj))
    filtered_file.close()


class EmotionAPI:
    '''
        This program uses ParallelDots for emotional text analysis (https://www.paralleldots.com)
    '''
    url = 'https://apis.paralleldots.com/v3/'
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    api_key = ''

    def __init__(self,apiExtension):
        self.url = '{}{}'.format(self.url, apiExtension)


def make_emotion_request(text):
    '''
        {
            'emotion': { 
                'probabilities': {
                    'angry': 0.376,
                    'indifferent': 0.189,
                    'sad': 0.381,
                    'excited': 0.014,
                    'happy': 0.04 
                },
                'emotion': 'sad' 
            },
            'usage': 'By accessing ParallelDots API or using information generated by ParallelDots API, you are agreeing to be bound by the ParallelDots API Terms of Use: http://www.paralleldots.com/terms-and-conditions'
        } 
    '''
    api_object = EmotionAPI('emotion')
    payload = 'text={}&api_key={}&lang_code=en'.format(text, api_object.api_key)
    response = requests.request('POST', api_object.url, data=payload, headers=api_object.headers)
    return response


def get_emotion_from_response(response):
    dictionary = ast.literal_eval(response.text)
    return dictionary['emotion']['emotion']


def get_probabilities_from_response(response):
    dictionary = ast.literal_eval(response.text)
    return dictionary['emotion']['probabilities']
